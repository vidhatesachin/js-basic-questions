
Q1:- What will be the output of following js code snippet?

const number = undefined + 11;
if (number === NaN) {
  document.write("NaN");
} else if (number === 11) {
  document.write("11");
} else {
  document.write("other");
}
Output: other

=======================================================================================================

Q2. What is the value of clothes[0]:

const clothes = ['jacket', 't-shirt'];
clothes.length = 0;
console.log(clothes[0]);  => ?????

Answer: 
length property of the array object has a special behavior:

Reducing the value of the length property has the side-effect of deleting own array elements whose array index is between the old and new length values.

As result when JavaScript executes clothes.length = 0, all clothes items are deleted.

clothes[0] is undefined, because clothes array has been emptied. 
=======================================================================================================

Q3. What will output to console the following code:

let i;
for (i = 0; i < 3; i++) {
  const log = () => {
    console.log(i);
  }
  setTimeout(log, 100);
}

Answer
If you haven’t heard about this tricky question before, most likely your answer is 0, 1 and 2: which is incorrect. When I first had tried to solve it, this was my answer too!

There are 2 phases behind executing this snippet.

Phase 1

for() iterating 3 times. During each iteration a new function log() is created, which captures the variable i. Then setTimout() schedules an execution of log().
When for() cycle completes, i variable has value 3.
log() is a closure that captures the variable i, which is defined in the outside scope of for() cycle. It’s important to understand that the closure captures i variable lexically.

Phase 2

The second phase happens after 100ms:

The 3 scheduled log() callbacks are called by setTimeout(). log() reads the current value of variable i, which is 3, and logs to console 3.
That’s why the output to the console is 3, 3 and 3.

If you struggle understanding closures, I recommend reading A Simple Explanation of JavaScript Closures.


=======================================================================================================
Q4. How can you create an object in JavaScript?

JavaScript supports Object concept very well. You can create an object using the object literal as follows −

var emp = {
name: "Daniel",
age: 23
};


=======================================================================================================

Q5. What will be the output of the code below?

var Y = 1;
if (function F(){})
{
y += Typeof F;</span>
}
console.log(y);


Answer: The output would be 1undefined. The if condition statement evaluates using eval, so eval(function f(){}) returns function f(){} (which is true). Therefore, inside the if statement, executing typeof f returns undefined because the if statement code executes at run time, and the statement inside the if condition is evaluated during run time.

=======================================================================================================

Q6. What will be the output of the following code?

var Employee =
{
company: 'xyz'
}
var Emp1 = Object.create(employee);
delete Emp1.company Console.log(emp1.company);

Answer: The output would be xyz. Here, emp1 object has company as its prototype property. The delete operator doesn’t delete prototype property. emp1 object doesn’t have company as its own property. However, we can delete the company property directly from the Employee object using delete Employee.company.






=======================================================================================================

https://www.toptal.com/javascript/interview-questions

https://www.fullstack.cafe/blog/javascript-code-interview-questions

=======================================================================================================
